{"version":3,"sources":["TheTree.tsx","TheBox.tsx","App.tsx","index.tsx"],"names":["classes","root","height","flexGrow","maxWidth","TheTree","props","BoxSelectFunc","tree_data","TreeView","style","defaultCollapseIcon","defaultExpandIcon","sx","overflowY","onNodeSelect","renderTree","nodes","map","node","TreeItem","nodeId","id","label","name","Array","isArray","children","box_root","wells","TextAlign","backgroundColor","borderStyle","borderColor","borderWidth","minWidth","minHeight","TheBox","box_info","width","rows","columns","square_size","e","i","Box","display","ee","ii","well_style","selected_well","onClick","WellSelectFunc","Object","assign","top","well","overflow","paper","padding","App","useDimensions","observe","useState","content","size","box","setBox","setWell","wellText","setWellText","flexDirection","event","nodeIds","window","my_tree","ref","well_id","fetch","credentials","then","response","json","catch","error","console","log","entries","val_name","value","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.8da7cb70.chunk.js","sourcesContent":["import React from 'react';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst classes = {\n\troot: {\n\t\theight: 240,\n\t\tflexGrow: 1,\n\t\tmaxWidth: 400,\n\t},\n}\n\nexport default function TheTree(props: {BoxSelectFunc: (event: React.ChangeEvent<{}>, nodeIds: string) => void, tree_data: {id: string, name:string, children: any}[]}) {\n\tconst { BoxSelectFunc, tree_data } = props\n\tconst renderTree = (nodes: {id: string, name: string, children: any}[]) => (\n\t\tnodes.map((node) => (\n\t\t\t<TreeItem key={node.id} nodeId={node.id} label={node.name}>\n\t\t\t\t{Array.isArray(node.children) ? renderTree(node.children) : null}\n\t\t\t</TreeItem>))\n\t)\n\n\treturn (\n\t\t<TreeView\n\t\t\tstyle={classes.root}\n\t\t\tdefaultCollapseIcon={<ExpandMoreIcon />}\n\t\t\tdefaultExpandIcon={<ChevronRightIcon />}\n\t\t\tsx={{ height: 110, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n\t\t\tonNodeSelect={BoxSelectFunc}\n\t\t>\n\t\t\t{renderTree(tree_data)}\n\t\t</TreeView>\n\t);\n}\n","import React from 'react';\nimport Box from '@material-ui/core/Box';\n\nconst classes = {\n\t\tbox_root: {\n\t\t},\n\t\twells: {\n\t\t\tTextAlign: 'center',\n\t\t\tbackgroundColor: 'white',\n\t\t\tborderStyle: 'solid',\n\t\t\tborderColor: 'black',\n\t\t\tborderWidth: '1px',\n\t\t\tminWidth: '50px',\n\t\t\tminHeight: '50px'\n\t\t},\n}\n\nexport default function TheBox(props: {selected_well: number, WellSelectFunc: (well_id: number) => void, box_info: {content: string[], size: {rows: number, columns: number}}, height: number, width: number}) {\n\tconst {box_info, height, width} = props\n\tconst {rows, columns} = box_info['size']\n\n\tlet limw = width/columns\n\tlet limh = height/rows\n\n\tlet square_size = {\n\t\theight: width / columns,\n\t\twidth: width / columns\n\t}\n\tif (limh < limw) {\n\t\tsquare_size = {\n\t\t\theight: height / rows,\n\t\t\twidth: height / rows\n\t\t}\n\t}\n\n\treturn (\n\t\t<div style={classes.box_root}>\n\t\t\t{[...Array(rows)].map((e, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Box display=\"flex\" flexGrow={1} key={i}>\n\t\t\t\t\t\t{[...Array(columns)].map((ee, ii) => {\n\t\t\t\t\t\t\tlet well_style = {backgroundColor: \"white\"}\n\t\t\t\t\t\t\tif (i*columns+ii === props.selected_well) {\n\t\t\t\t\t\t\t\twell_style = {backgroundColor: \"red\"}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn <div\n\t\t\t\t\t\t\t\tonClick={() => props.WellSelectFunc(i*columns+ii)}\n\t\t\t\t\t\t\t\tstyle={Object.assign({}, classes.wells, square_size, well_style)}\n\t\t\t\t\t\t\t\tkey={ii}>\n\t\t\t\t\t\t\t\t{box_info['content'][i*columns+ii]}\n\t\t\t\t\t\t\t</div>})\n\t\t\t\t\t\t}\n\t\t\t\t\t</Box>)\n\t\t\t})}\n\t\t</div>\n\t);\n}\n","import React, {useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport TheTree from './TheTree';\nimport TheBox from './TheBox'\nimport useDimensions from \"react-cool-dimensions\";\n\n\ndeclare global {\n    interface Window {\n        box_info: {[key: string]: {content: string[], size: {rows: number, columns: number}}},\n        my_tree: {id: string, name: string, children: any}[],\n    }\n}\n\n\nconst classes = {\n    root: { height: \"100%\" },\n    top: { height: \"100px\", backgroundColor: 'red' },\n    well: { backgroundColor: 'salmon', overflow: \"auto\", },\n    paper: { padding: 5, height: \"100%\" },\n}\n\n\nexport default function App() {\n    const { observe, width, height } = useDimensions()\n    const [box, setBox] = useState({id: \"\", content: [\"\"], size: {rows: 1, columns: 1}});\n    const [well, setWell] = useState(-1)\n    const [wellText, setWellText] = useState({})\n\n    const handleTreeSelect = (event: React.ChangeEvent<{}>, nodeIds: string) => {\n        if (nodeIds in window.box_info) {\n            setBox({id: nodeIds, ...window.box_info[nodeIds]})\n            setWell(-1)\n        }\n    }\n\n    const handleWellSelect = (well_id: number) => {\n        setWell(well_id)\n\n        fetch(\"vial_info/\"+box.id+\"/\"+well_id, { credentials: 'include' })\n            .then(response => response.json())\n            .then(json => setWellText(json))\n            .catch(error => console.log(error))\n    }\n\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" style={classes.root}>\n            <div id=\"storage_top\" style={classes.top}>\n                header\n            </div>\n            <Box display=\"flex\" flexGrow={1} id=\"storage_bottom\">\n                <div id=\"storage_tree\">\n                    <TheTree BoxSelectFunc={handleTreeSelect} tree_data={window.my_tree}/>\n                </div>\n                <div id=\"storage_box\" ref={observe}>\n                    <TheBox selected_well={well} WellSelectFunc={handleWellSelect} box_info={box} height={height} width={width}/>\n                </div>\n                <Box id=\"storage_well\" flexGrow={1} style={classes.well}>\n                    <ul>\n                        {\n                            Object.entries(wellText).map(\n                                ([val_name,value],i) => <li key={i}>{val_name}: {value}</li>\n                            )\n                        }\n                    </ul>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.css'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <CssBaseline />\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}