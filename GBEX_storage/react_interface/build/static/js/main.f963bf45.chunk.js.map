{"version":3,"sources":["TheTree.tsx","TheBox.tsx","App.tsx","index.tsx"],"names":["classes","root","height","flexGrow","maxWidth","TheTree","props","BoxSelectFunc","tree_data","TreeView","style","defaultCollapseIcon","defaultExpandIcon","sx","overflowY","onNodeSelect","renderTree","nodes","TreeItem","nodeId","id","label","name","Array","isArray","children","map","node","box_root","wells","TextAlign","backgroundColor","borderStyle","borderColor","borderWidth","minWidth","minHeight","TheBox","box_info","width","rows","columns","square_size","e","i","Box","display","ee","ii","well_style","selected_well","onClick","WellSelectFunc","Object","assign","top","well","overflow","paper","padding","content","keys","size","mytree","App","useDimensions","observe","useState","box","setBox","setWell","flexDirection","event","nodeIds","ref","well_id","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.f963bf45.chunk.js","sourcesContent":["import React from 'react';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\n\nconst classes = {\n\troot: {\n\t\theight: 240,\n\t\tflexGrow: 1,\n\t\tmaxWidth: 400,\n\t},\n}\n\nexport default function TheTree(props: {BoxSelectFunc: (event: React.ChangeEvent<{}>, nodeIds: string) => void, tree_data: {id: string, name:string, children: any}}) {\n\tconst { BoxSelectFunc, tree_data } = props\n\n\tconst renderTree = (nodes: { id: string, name: string, children: any }) => (\n\t\t<TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\n\t\t\t{Array.isArray(nodes.children)\n\t\t\t\t? nodes.children.map((node) => renderTree(node))\n\t\t\t\t: null}\n\t\t</TreeItem>\n\t);\n\treturn (\n\t\t<TreeView\n\t\t\tstyle={classes.root}\n\t\t\tdefaultCollapseIcon={<ExpandMoreIcon />}\n\t\t\tdefaultExpandIcon={<ChevronRightIcon />}\n\t\t\tsx={{ height: 110, flexGrow: 1, maxWidth: 400, overflowY: 'auto' }}\n\t\t\tonNodeSelect={BoxSelectFunc}\n\t\t>\n\t\t\t{renderTree(tree_data)}\n\t\t</TreeView>\n\t);\n}\n","import React from 'react';\nimport Box from '@material-ui/core/Box';\n\nconst classes = {\n\t\tbox_root: {\n\t\t},\n\t\twells: {\n\t\t\tTextAlign: 'center',\n\t\t\tbackgroundColor: 'white',\n\t\t\tborderStyle: 'solid',\n\t\t\tborderColor: 'black',\n\t\t\tborderWidth: '1px',\n\t\t\tminWidth: '50px',\n\t\t\tminHeight: '50px'\n\t\t},\n}\n\nexport default function TheBox(props: {selected_well: number, WellSelectFunc: (well_id: number) => void, box_info: {content: number[], size: {rows: number, columns: number}}, height: number, width: number}) {\n\tconst {box_info, height, width} = props\n\tconst {rows, columns} = box_info['size']\n\n\tlet limw = width/columns\n\tlet limh = height/rows\n\n\tlet square_size = {\n\t\theight: width / columns,\n\t\twidth: width / columns\n\t}\n\tif (limh < limw) {\n\t\tsquare_size = {\n\t\t\theight: height / rows,\n\t\t\twidth: height / rows\n\t\t}\n\t}\n\n\treturn (\n\t\t<div style={classes.box_root}>\n\t\t\t{[...Array(rows)].map((e, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Box display=\"flex\" flexGrow={1} key={i}>\n\t\t\t\t\t\t{[...Array(columns)].map((ee, ii) => {\n\t\t\t\t\t\t\tlet well_style = {backgroundColor: \"white\"}\n\t\t\t\t\t\t\tif (i*columns+ii === props.selected_well) {\n\t\t\t\t\t\t\t\twell_style = {backgroundColor: \"red\"}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn <div onClick={() => props.WellSelectFunc(i*columns+ii)} style={Object.assign({}, classes.wells, square_size, well_style)} key={ii}>{box_info['content'][i*columns+ii]+1}</div>})\n\t\t\t\t\t\t}\n\t\t\t\t\t</Box>)\n\t\t\t})}\n\t\t</div>\n\t);\n}\n","import React, {useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport TheTree from './TheTree';\nimport TheBox from './TheBox'\nimport useDimensions from \"react-cool-dimensions\";\n\n\nconst classes = {\n        root: {\n            height: \"100%\"\n        },\n        top: {\n            height: \"100px\",\n            backgroundColor: 'red'\n\n        },\n        well: {\n            backgroundColor: 'salmon',\n            overflow: \"auto\",\n        },\n        paper: {\n            padding: 5,\n            height: \"100%\"\n        },\n}\n\nconst box_info: {[key: string]: {content: number[], size: {rows: number, columns: number}}} = {\n    '1': {content: [...Array(3*3).keys()], size: {rows: 3, columns: 3}},\n    '2': {content: [...Array(9*9).keys()], size: {rows: 9, columns: 9}},\n    '3': {content: [...Array(8*12).keys()], size: {rows: 8, columns: 12}},\n}\n\nconst mytree = {\n    id: 'root',\n    name: 'Rum931',\n    children: [\n        {\n            id: '1',\n            name: 'l√∏s box',\n        },\n        {\n            id: 'fre4',\n            name: 'Fryser -80',\n            children: [\n                {\n                    id: '2',\n                    name: 'Box 1',\n                },\n                {\n                    id: '3',\n                    name: 'Box CHO',\n                },\n            ],\n        },\n    ],\n}\n\nexport default function App() {\n    const { observe, width, height } = useDimensions()\n    const [box, setBox] = useState({content: [0], size: {rows: 1, columns: 1}});\n    const [well, setWell] = useState(0)\n\n    const handleTreeSelect = (event: React.ChangeEvent<{}>, nodeIds: string) => {\n        if (nodeIds in box_info) {\n            setBox(box_info[nodeIds])\n        }\n    };\n    const handleWellSelect = (well_id: number) => {\n        setWell(well_id)\n    }\n    return (\n        <Box display=\"flex\" flexDirection=\"column\" style={classes.root}>\n            <div id=\"storage_top\" style={classes.top}>\n                header\n            </div>\n            <Box display=\"flex\" flexGrow={1} id=\"storage_bottom\">\n                <div id=\"storage_tree\">\n                    <TheTree BoxSelectFunc={handleTreeSelect} tree_data={mytree}/>\n                </div>\n                <div id=\"storage_box\" ref={observe}>\n                    <TheBox selected_well={well} WellSelectFunc={handleWellSelect} box_info={box} height={height} width={width}/>\n                </div>\n                <Box id=\"storage_well\" flexGrow={1} style={classes.well}>\n                    {well+1}\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.css'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <CssBaseline />\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}